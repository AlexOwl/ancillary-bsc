import{ethers as e}from"ethers";import{Logger as r}from"@ethersproject/logger";import{PocketProvider as n,UrlJsonRpcProvider as t}from"@ethersproject/providers";import"@ethersproject/properties";const s="@ethers-ancillary/bsc@0.0.1",a=new e.utils.Logger(s),o=[{name:"bsc-mainnet",chainId:56},{name:"bsc-testnet",chainId:97}];function i(e){if(null==e)return null;if("number"==typeof e){const r=o.filter((r=>r.chainId===e));return r.length?{name:r[0].name,chainId:r[0].chainId}:{name:"unknown",chainId:e}}if("string"==typeof e){const r=o.filter((r=>r.name===e));return r.length?{name:r[0].name,chainId:r[0].chainId}:null}if("string"==typeof e.name&&"number"==typeof e.chainId){const r=i(e.name),n=i(e.chainId);if(null==r&&null==n)return{name:e.name,chainId:e.chainId};if(r&&n&&r.name===n.name&&r.chainId===n.chainId)return r}return a.throwArgumentError("network chainId mismatch","network",e)}const c=new e.utils.Logger(s);class u extends e.providers.EtherscanProvider{constructor(r,n){const t=i(null==r?"bsc-mainnet":r);switch((t||{}).name){case"bsc-mainnet":case"bsc-testnet":break;default:c.throwError("unsupported network",e.utils.Logger.errors.UNSUPPORTED_OPERATION,{network:r})}super(t,n||"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9")}getBaseUrl(){switch(this.network?this.network.name:"invalid"){case"bsc-mainnet":return"http://api.bscscan.com";case"bsc-testnet":return"http://api-testnet.bscscan.com"}return c.throwArgumentError("unsupported network","network",this.network)}isCommunityResource(){return"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9"===this.apiKey}}const l=new r(s);class p extends n{constructor(e,n){const t=i(e||"bsc-mainnet");t||l.throwError("unsupported network",r.errors.INVALID_ARGUMENT,{argument:"network",value:e}),n||(n={applicationId:"6136201a7bad1500343e248d",loadBalancer:!0}),super(t,n)}static getUrl(e,n){let t=null;switch(e?e.name:"unknown"){case"bsc-mainnet":t="bsc-mainnet.gateway.pokt.network";break;default:l.throwError("unsupported network",r.errors.INVALID_ARGUMENT,{argument:"network",value:e})}const s={url:`https://${t}/v1/lb/${n.applicationId}`,headers:{}};return null!=n.applicationSecretKey&&(s.user="",s.password=n.applicationSecretKey),s}isCommunityResource(){return"6136201a7bad1500343e248d"===this.applicationId}}const m=new r(s);class h extends t{constructor(e,n){const t=i(e||"bsc-mainnet");switch((t||{}).name){case"bsc-mainnet":case"bsc-testnet":break;default:m.throwError("unsupported network",r.errors.UNSUPPORTED_OPERATION,{network:e})}null==n&&m.throwError("no default apiKey",r.errors.INVALID_ARGUMENT,{argument:"apiKey",value:n}),super(t,n)}static getApiKey(e){const n={apiKey:null,region:"nyc"};return"string"==typeof e?n.apiKey=e:(null!=e.apiKey&&(n.apiKey=e.apiKey),null!=e.region&&(n.region=n.region)),null==n.apiKey&&m.throwError("apiKey is invalid",r.errors.INVALID_ARGUMENT,{argument:"apiKey",value:e}),n}static getUrl(e,n){let t=null;switch(e?e.name:"unknown"){case"bsc-mainnet":t="bsc/mainnet";break;case"bsc-testnet":t="bsc/testnet";break;default:m.throwError("unsupported network",r.errors.INVALID_ARGUMENT,{argument:"network",value:e})}const s={url:`https://speedy-nodes-${n.region}.moralis.io/${n.apiKey}/${t}`,headers:{}};return s}isCommunityResource(){return!1}}function d(r,n){const t=[];return t.push(new u(r,(n||{}).bscscan||void 0)),t.push(new p(r,(n||{}).bscpocket||void 0)),n&&n.bscmoralis&&("string"==typeof n.bscmoralis||n.bscmoralis.apiKey)&&t.push(new h(r,n.bscmoralis)),new e.providers.FallbackProvider(t,Math.min(t.length,2))}export{h as BscMoralisProvider,p as BscPocketProvider,u as BscscanProvider,d as getDefaultProvider,i as getNetwork};
